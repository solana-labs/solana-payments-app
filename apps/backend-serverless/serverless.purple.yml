service: backend-serverless-purple
frameworkVersion: '3'
useDotenv: true
provider:
  name: aws
  runtime: nodejs18.x
  httpApi:
    cors:
      allowedOrigins:
        - http://localhost:3005
        - http://localhost:3001
        - https://merchant.solanapay.com
        - https://merchant-staging.solanapay.com
        - https://pay.solanapay.com
        - https://pay-staging.solanapay.com
      allowedHeaders:
        - Content-Type
        - Authorization
      allowedMethods:
        - OPTIONS
        - GET
        - POST
        - PUT
        - PATCH
        - DELETE
      allowCredentials: true
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  environment:
    SHOPIFY_SECRET_KEY: ${env:SHOPIFY_SECRET_KEY}
    SHOPIFY_CLIENT_ID: ${env:SHOPIFY_CLIENT_ID}
    BACKEND_URL: ${env:BACKEND_URL}
    MERCHANT_UI_URL: ${env:MERCHANT_UI_URL}
    DATABASE_URL: ${env:DATABASE_URL}
    PAYMENT_UI_URL: ${env:PAYMENT_UI_URL}
    TRANSACTION_REQUEST_SERVER_URL: ${env:TRANSACTION_REQUEST_SERVER_URL}
    TRM_API_KEY: ${env:TRM_API_KEY}
    JWT_SECRET_KEY: ${env:JWT_SECRET_KEY}
    SENTRY_DSN: ${env:SENTRY_DSN}
    SENTRY_RELEASE: ${env:SENTRY_RELEASE}
    HELIUS_AUTHORIZATION: ${env:HELIUS_AUTHORIZATION}
    HISTORICAL_FEE_PAYERS: ${env:HISTORICAL_FEE_PAYERS}
    HELIUS_API_KEY: ${env:HELIUS_API_KEY}
    PERSONA_API_KEY: ${env:PERSONA_API_KEY}
    NODE_ENV: ${env:NODE_ENV}
    AWS_BUCKET_OBJECT_NAME: ${self:custom.gas-object-name}
    AWS_BUCKET_NAME: ${self:custom.gas-bucket-name}
    AWS_BUCKET_REGION: ${self:provider.region}
    AWS_SINGLE_USE_KEYPAIR_BUCKET_REGION: ${self:provider.region}
    AWS_SINGLE_USE_KEYPAIR_BUCKET_NAME: ${self:custom.single-use-bucket-name}
    WEBSOCKET_URL: ${self:custom.${self:provider.stage}.WebsocketUrl, self:resources.Outputs.WebsocketUrl.Value}
    SHOPIFY_SQS_URL: ${self:custom.${self:provider.stage}.ShopifyQueueUrl, self:resources.Outputs.ShopifyQueueUrl.Value}
    PROCESS_SQS_URL: ${self:custom.${self:provider.stage}.ProcessQueueUrl, self:resources.Outputs.ProcessQueueUrl.Value}
    SP_INFO_SQS_URL: ${self:custom.${self:provider.stage}.SolanaPayInfoQueueUrl, self:resources.Outputs.SolanaPayInfoQueueUrl.Value}
    GAS_KEYPAIR_SECRET: ${env:GAS_KEYPAIR_SECRET}
    USE_AUTH_MOCK: ${env:USE_AUTH_MOCK}
    AWS_SDK_JS_SUPPRESS_MAINTENANCE_MODE_MESSAGE: ${1}
package:
  patterns:
    - 'node_modules/.prisma/**'
    - '!node_modules/.prisma/client/libquery_engine-*'
    - 'node_modules/.prisma/client/libquery_engine-rhel-openssl-1.0.x.so.node'
    - 'node_modules/.prisma/client/libquery_engine-linux-arm64-*'
    - '!node_modules/prisma/libquery_engine-*'
    - '!node_modules/@prisma/engines/**'
functions:
  install:
    handler: src/handlers/shopify-handlers/install.install
    events:
      - httpApi:
          path: /install
          method: get
  logout:
    handler: src/handlers/shopify-handlers/logout.logout
    events:
      - httpApi:
          path: /logout
          method: get
  redirect:
    handler: src/handlers/shopify-handlers/redirect.redirect
    events:
      - httpApi:
          path: /redirect
          method: get
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:SendMessage
        Resource: ${self:resources.Outputs.ShopifyQueueArn.Value}
  error-purple:
    handler: src/handlers/testing/error.error
    events:
      - httpApi:
          path: /error
          method: get
  helius:
    handler: src/handlers/webhooks/helius.helius
    timeout: 60 # Increase the timeout to 60 seconds
    events:
      - httpApi:
          path: /helius
          method: post
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:SendMessage
        Resource: ${self:resources.Outputs.ProcessQueueArn.Value}
      - Effect: Allow
        Action:
          - execute-api:ManageConnections
        Resource: '*'
  cron:
    handler: src/handlers/webhooks/cron.cron
    events:
      - httpApi:
          path: /cron
          method: get
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:SendMessage
        Resource: ${self:resources.Outputs.ProcessQueueArn.Value}
      - Effect: Allow
        Action:
          - execute-api:ManageConnections
        Resource: '*'
  payment-transaction:
    handler: src/handlers/transactions/payment-transaction.paymentTransaction
    events:
      - httpApi:
          path: /payment-transaction
          method: post
    iamRoleStatementsName: payment-tx-${self:provider.stage}-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: 'arn:aws:s3:::${self:custom.gas-bucket-name}/${self:custom.gas-object-name}'
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: 'arn:aws:s3:::${self:custom.single-use-bucket-name}/*'
      - Effect: Allow
        Action:
          - execute-api:ManageConnections
        Resource: '*'
      - Effect: Allow
        Action:
          - sqs:SendMessage
        Resource: ${self:resources.Outputs.SolanaPayInfoQueueArn.Value}
      - Effect: Allow
        Action:
          - sqs:SendMessage
        Resource: ${self:resources.Outputs.ShopifyQueueArn.Value}
  refund-transaction:
    handler: src/handlers/transactions/refund-transaction.refundTransaction
    events:
      - httpApi:
          path: /refund-transaction
          method: post
    iamRoleStatementsName: refund-tx-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: 'arn:aws:s3:::${self:custom.gas-bucket-name}/${self:custom.gas-object-name}'
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: 'arn:aws:s3:::${self:custom.single-use-bucket-name}/*'
  points-setup-transaction:
    handler: src/handlers/transactions/points-setup-transaction.pointsSetupTransaction
    events:
      - httpApi:
          path: /points-setup-transaction
          method: post
    iamRoleStatementsName: points-setup-tx-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: 'arn:aws:s3:::${self:custom.gas-bucket-name}/${self:custom.gas-object-name}'
  reject-refund:
    handler: src/handlers/clients/merchant-ui/write-data/reject-refund.rejectRefund
    events:
      - httpApi:
          path: /reject-refund
          method: post
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:SendMessage
        Resource: ${self:resources.Outputs.ShopifyQueueArn.Value}
  payment-metadata:
    handler: src/handlers/transactions/payment-transaction.paymentMetadata
    events:
      - httpApi:
          path: /payment-transaction
          method: get
  payment-status:
    handler: src/handlers/clients/payment-ui/payment-status.paymentStatus
    events:
      - httpApi:
          path: /payment-status
          method: get
  customer-data:
    handler: src/handlers/clients/payment-ui/customer-data.customerData
    events:
      - httpApi:
          path: /customer-data
          method: get
  balance:
    handler: src/handlers/clients/payment-ui/balance.balance
    events:
      - httpApi:
          path: /balance
          method: get
  merchant-data:
    handler: src/handlers/clients/merchant-ui/read-data/merchant-data.merchantData
    events:
      - httpApi:
          path: /merchant-data
          method: get
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:SendMessage
        Resource: ${self:resources.Outputs.ShopifyQueueArn.Value}
  refund-data:
    handler: src/handlers/clients/merchant-ui/read-data/refund-data.refundData
    events:
      - httpApi:
          path: /refund-data
          method: get
  refund-status:
    handler: src/handlers/clients/merchant-ui/read-data/refund-status.refundStatus
    events:
      - httpApi:
          path: /refund-status
          method: get
  payment-data:
    handler: src/handlers/clients/merchant-ui/read-data/payment-data.paymentData
    events:
      - httpApi:
          path: /payment-data
          method: get
  update-merchant:
    handler: src/handlers/clients/merchant-ui/write-data/update-merchant.updateMerchant
    events:
      - httpApi:
          path: /update-merchant
          method: put
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:SendMessage
        Resource: ${self:resources.Outputs.ShopifyQueueArn.Value}
  update-loyalty:
    handler: src/handlers/clients/merchant-ui/write-data/update-loyalty.updateLoyalty
    events:
      - httpApi:
          path: /update-loyalty
          method: put
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:SendMessage
        Resource: ${self:resources.Outputs.ShopifyQueueArn.Value}
  sqs-message-receive:
    handler: src/handlers/webhooks/sqs/sqs-message-receive.sqsMessageReceive
    environment:
      RETRY_ARN: ${self:resources.Outputs.RetryMachine.Value}
    events:
      - sqs:
          arn: ${self:resources.Outputs.ShopifyQueueArn.Value}
          batchSize: 1
    iamRoleStatementsName: sqs-msg-receive-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - states:StartExecution
        Resource: ${self:resources.Outputs.RetryMachine.Value}
      - Effect: Allow
        Action:
          - sqs:ReceiveMessage
        Resource: ${self:resources.Outputs.ShopifyQueueArn.Value}
  process-message:
    handler: src/handlers/webhooks/sqs/process-transaction-message.processTransactionMessage
    events:
      - sqs:
          arn: ${self:resources.Outputs.ProcessQueueArn.Value}
          batchSize: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:ReceiveMessage
        Resource: ${self:resources.Outputs.ProcessQueueArn.Value}
      - Effect: Allow
        Action:
          - execute-api:ManageConnections
        Resource: '*'
      - Effect: Allow
        Action:
          - sqs:SendMessage
        Resource: ${self:resources.Outputs.ShopifyQueueArn.Value}
  sp-info-message:
    handler: src/handlers/webhooks/sqs/solana-pay-info-message.solanaPayInfoMessage
    events:
      - sqs:
          arn: ${self:resources.Outputs.SolanaPayInfoQueueArn.Value}
          batchSize: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:ReceiveMessage
        Resource: ${self:resources.Outputs.SolanaPayInfoQueueArn.Value}
      - Effect: Allow
        Action:
          - execute-api:ManageConnections
        Resource: '*'
  retry-request:
    handler: src/handlers/webhooks/retry.retry
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:SendMessage
        Resource: ${self:resources.Outputs.ShopifyQueueArn.Value}
  queue:
    handler: src/handlers/testing/queue.queue
    events:
      - httpApi:
          path: /queue
          method: get
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:SendMessage
        Resource: ${self:resources.Outputs.ShopifyQueueArn.Value}
  connectHandler:
    handler: src/handlers/websockets/connect.connect
    events:
      - websocket: $connect
    iamRoleStatements:
      - Effect: Allow
        Action:
          - execute-api:ManageConnections
        Resource: '*'
  disconnectHandler:
    handler: src/handlers/websockets/disconnect.disconnect
    events:
      - websocket: $disconnect
  safety-key-uploaded:
    handler: src/handlers/webhooks/s3/safety-key-uploaded.safetyKeyUploaded
    environment:
      SAFETY_ARN: ${self:resources.Outputs.SafetyMachine.Value}
    events:
      - s3:
          bucket: ${self:custom.single-use-bucket-name}
          event: s3:ObjectCreated:*
          rules:
            - suffix: '.json'
          existing: true
    iamRoleStatementsName: safety-key-up-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: 'arn:aws:s3:::${self:custom.single-use-bucket-name}/*'
      - Effect: Allow
        Action:
          - states:StartExecution
        Resource: ${self:resources.Outputs.SafetyMachine.Value}
  safety-key-sweep:
    handler: src/handlers/webhooks/step-functions/safety-key-sweep.safetyKeySweep
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: 'arn:aws:s3:::${self:custom.single-use-bucket-name}/*'
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: 'arn:aws:s3:::${self:custom.gas-bucket-name}/*'
      - Effect: Allow
        Action:
          - s3:DeleteObject
        Resource: 'arn:aws:s3:::${self:custom.single-use-bucket-name}/*'
  checkouts:
    handler: src/handlers/webhooks/checkouts.checkouts
    events:
      - httpApi:
          path: /checkouts
          method: post
  products:
    handler: src/handlers/webhooks/products.products
    events:
      - httpApi:
          path: /products
          method: post
stepFunctions:
  stateMachines:
    retry:
      definition:
        StartAt: wait_using_seconds
        States:
          wait_using_seconds:
            Type: Wait
            SecondsPath: '$.retrySeconds'
            Next: process_retry
          process_retry:
            Type: Task
            Resource:
              Fn::GetAtt: [retry-request, Arn]
            End: true
    safety:
      definition:
        StartAt: wait_using_seconds
        States:
          wait_using_seconds:
            Type: Wait
            Seconds: 240
            Next: sweep_safety
          sweep_safety:
            Type: Task
            Resource:
              Fn::GetAtt: [safety-key-sweep, Arn]
            End: true
resources:
  Parameters:
    Stage:
      Type: String
      Default: ${self:provider.stage}
  Outputs:
    RetryMachine:
      Description: The ARN of the retry machine
      Value:
        Fn::GetAtt: [RetryStepFunctionsStateMachine, Arn]
    SafetyMachine:
      Description: The ARN of the safety machine
      Value:
        Fn::GetAtt: [SafetyStepFunctionsStateMachine, Arn]
    # GasBucketArn:
    #   Description: The arn of the gas bucket
    #   Value:
    #     Fn::GetAtt: [GasBucket, Arn]
    # SingleUseKeyPairBucketArn:
    #   Description: The arn of the single use key pair bucket
    #   Value:
    #     Fn::GetAtt: [SingleUseKeyPairBucket, Arn]
    ShopifyQueueArn:
      Description: The arn of the shopify sqs queue
      Value:
        Fn::GetAtt: [ShopifyQueue, Arn]
    ShopifyQueueUrl:
      Description: The url of the shopify sqs queue
      Value:
        Ref: ShopifyQueue
    ProcessQueueArn:
      Description: The arn of the process sqs queue
      Value:
        Fn::GetAtt: [ProcessQueue, Arn]
    ProcessQueueUrl:
      Description: The arn of the process sqs queue
      Value:
        Ref: ProcessQueue
    SolanaPayInfoQueueArn:
      Description: The arn of the solana pay info sqs queue
      Value:
        Fn::GetAtt: [SolanaPayInfoQueue, Arn]
    SolanaPayInfoQueueUrl:
      Description: The url of the solana pay info sqs queue
      Value:
        Ref: SolanaPayInfoQueue
    WebSocketApiId:
      Description: The WebSocket API ID
      Value:
        Ref: WebsocketsApi
    WebsocketUrl:
      Description: Example of joining two strings
      Value:
        Fn::Join:
          - ''
          - - 'https://'
            - '${self:resources.Outputs.WebSocketApiId.Value}'
            - '.execute-api.us-east-1.amazonaws.com/'
            - '${self:provider.stage}'
  Resources:
    # GasBucket:
    #   Type: AWS::S3::Bucket
    #   DeletionPolicy: Retain
    #   Properties:
    #     BucketName: ${self:custom.gas-bucket-name}
    # SingleUseKeyPairBucket:
    #   Type: AWS::S3::Bucket
    #   DeletionPolicy: Retain
    #   Properties:
    #     BucketName: ${self:custom.single-use-bucket-name}
    ShopifyQueue:
      Type: AWS::SQS::Queue
      DeletionPolicy: Retain
      Properties:
        QueueName: shopify-queue-${self:provider.stage}
    ProcessQueue:
      Type: AWS::SQS::Queue
      DeletionPolicy: Retain
      Properties:
        QueueName: process-queue-${self:provider.stage}
    SolanaPayInfoQueue:
      Type: AWS::SQS::Queue
      DeletionPolicy: Retain
      Properties:
        QueueName: sp-info-queue-${self:provider.stage}

plugins:
  - serverless-plugin-optimize
  - serverless-plugin-typescript
  - serverless-prune-plugin
  - serverless-prune-versions
  - serverless-step-functions
  - serverless-iam-roles-per-function
  - serverless-offline
  - serverless-offline-sqs
  - serverless-plugin-common-excludes
  - serverless-plugin-include-dependencies

custom:
  serverless-offline:
    httpPort: 4000
    lambdaPort: 4001
    websocketPort: 4009
  gas-bucket-name: gas-bucket-${self:provider.stage}
  single-use-bucket-name: single-use-key-pair-bucket-${self:provider.stage}
  gas-object-name: 'gas-kp.json'
  prune:
    automatic: true
    includeLayers: true
    number: 3
  esbuild:
    forceInclude:
      - '@prisma/client'
  serverless-offline-sqs:
    autoCreate: true # create queue if not exists
    apiVersion: '2012-11-05'
    endpoint: http://0.0.0.0:9324
    region: ${self:provider.region}
    accessKeyId: root
    secretAccessKey: root
    skipCacheInvalidation: false
  dev:
    ShopifyQueueUrl: 'http://localhost:9324/queue/shopify-queue-dev'
    ProcessQueueUrl: 'http://localhost:9324/queue/process-queue-dev'
    SolanaPayInfoQueueUrl: 'http://localhost:9324/queue/sp-info-queue-dev'
    WebsocketUrl: 'http://localhost:4009'
