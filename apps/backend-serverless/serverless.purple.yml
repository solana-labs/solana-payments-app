service: backend-serverless-purple
frameworkVersion: '3'
useDotenv: true
provider:
  name: aws
  runtime: nodejs18.x
  httpApi:
    cors:
      allowedOrigins:
        - http://localhost:3005
        - https://merchant.solanapay.com
        - https://shopify-payment-ui.vercel.app
      allowedHeaders:
        - Content-Type
        - Authorization
      allowedMethods:
        - OPTIONS
        - GET
        - POST
        - PUT
        - PATCH
        - DELETE
      allowCredentials: true
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  environment:
    SHOPIFY_SECRET_KEY: ${env:SHOPIFY_SECRET_KEY}
    SHOPIFY_CLIENT_ID: ${env:SHOPIFY_CLIENT_ID}
    BACKEND_URL: ${env:BACKEND_URL}
    MERCHANT_UI_URL: ${env:MERCHANT_UI_URL}
    DATABASE_URL: ${env:DATABASE_URL}
    PAYMENT_UI_URL: ${env:PAYMENT_UI_URL}
    TRANSACTION_REQUEST_SERVER_URL: ${env:TRANSACTION_REQUEST_SERVER_URL}
    TRM_API_KEY: ${env:TRM_API_KEY}
    JWT_SECRET_KEY: ${env:JWT_SECRET_KEY}
    AWS_BUCKET_OBJECT_NAME: ${self:custom.gas-object-name}
    AWS_BUCKET_NAME: ${self:custom.gas-bucket-name}
    AWS_BUCKET_REGION: ${self:provider.region}
    AWS_SINGLE_USE_KEYPAIR_BUCKET_REGION: ${self:provider.region}
    AWS_SINGLE_USE_KEYPAIR_BUCKET_NAME: ${self:custom.single-use-bucket-name}
    SHOPIFY_SQS_URL: ${self:resources.Outputs.ShopifyQueueUrl.Value}
    SENTRY_DSN: ${env:SENTRY_DSN}
    SENTRY_RELEASE: ${env:SENTRY_RELEASE}
    # LOCAL_GAS: ${env:LOCAL_GAS}
    HELIUS_AUTHORIZATION: ${env:HELIUS_AUTHORIZATION}
    HISTORICAL_FEE_PAYERS: ${env:HISTORICAL_FEE_PAYERS}
    WEBSOCKET_URL: ${env:WEBSOCKET_URL}
    HELIUS_API_KEY: ${env:HELIUS_API_KEY}
    PERSONA_API_KEY: ${env:PERSONA_API_KEY}
    NODE_ENV: ${env:NODE_ENV}
    USE_AUTH_MOCK: ${env:USE_AUTH_MOCK}

package:
  excludeDevDependencies: true
  patterns:
    - 'node_modules/.prisma/**'
functions:
  install:
    handler: src/handlers/shopify-handlers/install.install
    events:
      - httpApi:
          path: /install
          method: get
  redirect:
    handler: src/handlers/shopify-handlers/redirect.redirect
    events:
      - httpApi:
          path: /redirect
          method: get
  helius:
    handler: src/handlers/webhooks/helius.helius
    timeout: 60 # Increase the timeout to 60 seconds
    events:
      - httpApi:
          path: /helius
          method: post
  cron:
    handler: src/handlers/webhooks/cron.cron
    events:
      - httpApi:
          path: /cron
          method: get
  payment-transaction:
    handler: src/handlers/transactions/payment-transaction.paymentTransaction
    events:
      - httpApi:
          path: /payment-transaction
          method: post
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: 'arn:aws:s3:::${self:custom.gas-bucket-name}/${self:custom.gas-object-name}'
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: 'arn:aws:s3:::${self:custom.single-use-bucket-name}/*'
      - Effect: Allow
        Action:
          - execute-api:ManageConnections
        Resource: '*'
  refund-transaction:
    handler: src/handlers/transactions/refund-transaction.refundTransaction
    events:
      - httpApi:
          path: /refund-transaction
          method: post
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: 'arn:aws:s3:::${self:custom.gas-bucket-name}/${self:custom.gas-object-name}'
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: 'arn:aws:s3:::${self:custom.single-use-bucket-name}/*'

  reject-refund:
    handler: src/handlers/clients/merchant-ui/write-data/reject-refund.rejectRefund
    events:
      - httpApi:
          path: /reject-refund
          method: post
  payment-metadata:
    handler: src/handlers/transactions/payment-transaction.paymentMetadata
    events:
      - httpApi:
          path: /payment-transaction
          method: get
  payment-status:
    handler: src/handlers/clients/payment-ui/payment-status.paymentStatus
    events:
      - httpApi:
          path: /payment-status
          method: get
  balance:
    handler: src/handlers/clients/payment-ui/balance.balance
    events:
      - httpApi:
          path: /balance
          method: get
  merchant-data:
    handler: src/handlers/clients/merchant-ui/read-data/merchant-data.merchantData
    events:
      - httpApi:
          path: /merchant-data
          method: get
  refund-data:
    handler: src/handlers/clients/merchant-ui/read-data/refund-data.refundData
    events:
      - httpApi:
          path: /refund-data
          method: get
  refund-status:
    handler: src/handlers/clients/merchant-ui/read-data/refund-status.refundStatus
    events:
      - httpApi:
          path: /refund-status
          method: get
  payment-data:
    handler: src/handlers/clients/merchant-ui/read-data/payment-data.paymentData
    events:
      - httpApi:
          path: /payment-data
          method: get
  update-merchant:
    handler: src/handlers/clients/merchant-ui/write-data/update-merchant.updateMerchant
    events:
      - httpApi:
          path: /update-merchant
          method: put
  sqs-message-receive:
    handler: src/handlers/webhooks/sqs-message-receive.sqsMessageReceive
    environment:
      RETRY_ARN: ${self:resources.Outputs.RetryMachine.Value}
    events:
      - sqs:
          arn: ${self:resources.Outputs.ShopifyQueueArn.Value}
          batchSize: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - states:StartExecution
        Resource: ${self:resources.Outputs.RetryMachine.Value}
      - Effect: Allow
        Action:
          - sqs:ReceiveMessage
        Resource: ${self:resources.Outputs.ShopifyQueueArn.Value}
  retry-request:
    handler: src/handlers/webhooks/retry.retry
  queue:
    handler: src/handlers/testing/queue.queue
    events:
      - httpApi:
          path: /queue
          method: get
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:SendMessage
        Resource: ${self:resources.Outputs.ShopifyQueueArn.Value}
  connectHandler:
    handler: src/handlers/websockets/connect.connect
    events:
      - websocket: $connect
    iamRoleStatements:
      - Effect: Allow
        Action:
          - execute-api:ManageConnections
        Resource: '*'
  disconnectHandler:
    handler: src/handlers/websockets/disconnect.disconnect
    events:
      - websocket: $disconnect
stepFunctions:
  stateMachines:
    retry:
        definition:
          StartAt: wait_using_seconds
          States: 
            wait_using_seconds: 
              Type: Wait
              SecondsPath: "$.retrySeconds"
              Next: process_retry
            process_retry: 
              Type: Task
              Resource:
                Fn::GetAtt: [retry-request, Arn]
              End: true
resources:
  Parameters:
    Stage:
      Type: String
      Default: ${self:provider.stage}
  Outputs:
    RetryMachine:
      Description: The ARN of the retry machine
      Value:
        Fn::GetAtt: [RetryStepFunctionsStateMachine, Arn]
    GasBucketArn:
      Description: The arn of the gas bucket
      Value:
        Fn::GetAtt: [GasBucket, Arn]
    SingleUseKeyPairBucketArn:
      Description: The arn of the single use key pair bucket
      Value:
        Fn::GetAtt: [SingleUseKeyPairBucket, Arn]
    ShopifyQueueArn:
      Description: The arn of the shopify sqs queue
      Value:
        Fn::GetAtt: [ShopifyQueue, Arn]
    ShopifyQueueUrl:
      Description: The url of the shopify sqs queue
      Value: 
        Ref: ShopifyQueue
  Resources:
    GasBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      Properties:
        BucketName: ${self:custom.gas-bucket-name}
    SingleUseKeyPairBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      Properties:
        BucketName: ${self:custom.single-use-bucket-name}
    ShopifyQueue:
      Type: AWS::SQS::Queue
      DeletionPolicy: Retain
      Properties:
        QueueName: shopify-queue-${self:provider.stage}
plugins:
  - serverless-plugin-typescript
  - serverless-plugin-common-excludes # this should go before serverless-plugin-include-dependencies
  - serverless-plugin-include-dependencies
  - serverless-prune-plugin
  - serverless-step-functions
  - serverless-iam-roles-per-function
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 4000
    lambdaPort: 4001
    websocketPort: 4009
  # s3:
  #   address: 'localhost'
  #   port: 4569
  #   directory: './buckets'
  #   accessKeyId: 'S3RVER'
  #   secretAccessKey: 'S3RVER'

  gas-bucket-name: gas-bucket-${self:provider.stage}
  single-use-bucket-name: single-use-key-pair-bucket-${self:provider.stage}
  gas-object-name: 'gas-kp.json'
